# -*- coding: utf-8 -*-
"""Codigo dataSENECA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_xw2GN-6XCR95iIyPKjuPO0sEWnf94bM
"""

import pandas as pd 
import numpy as np
import statistics as st
import datetime 
import calendar
import holidays
import matplotlib.pyplot as plt
import json


def read_data(name, path, w_s, w_e=None, d_s=0, d_e=7):
    
    co_holidays= holidays.Colombia() # Se buscan los festivos del año
    df = pd.read_csv(path,sep=",") # Se lee la data
    datad=df.copy()
    
    if not w_e:
        w_e = w_s+1
       
    aux_dict = {}
    # for i in range(w_s, w_e, 1):
    #     aux = df[i*7:(i+1)*7].copy()
    #     aux_dict[str(i)] = aux.mean()
    aux_dict = df[(w_s)*7+d_s:(w_e*7)-(7-d_e)].copy()
    # aux_dict = df[19:25].copy()
    aux_df = pd.DataFrame(aux_dict)
    aux_df_t = aux_df.T
    #aux_df_t.plot.line()

    plt.figure(figsize=(11,6))
    plt.ylim(0, 30000)
    plt.plot(aux_df_t, label=list(aux_df_t.columns),)
    
    # plt.plot(df[w_e*d:(w_e*d)+1].T, label='NEW', linestyle=':')
    # print('{} - {}'.format(w_e*d, (w_e*d)+1))
    # aux_df_t.plot.line()
    
    
    plt.plot(df[(w_e*7)-(7-d_e):(w_e*7)-(7-d_e)+1].T, 
             label=str((w_e*7)-(7-d_e))+' Forecast', linestyle=':')
    plt.plot(df[(w_e*7)-(7-d_e)+1:(w_e*7)-(7-d_e)+2].T, 
             label=str((w_e*7)-(7-d_e)+1)+' Real', linestyle='--')
    # plt.plot(df[69:70].T, label='NEW', linestyle='--')
    plt.legend(ncol=len(aux_df_t)+1, fontsize=8.5)
    
    x=[datetime.date(2019,1,1)+datetime.timedelta(i) 
       for i in range(len(datad))] #Se generan las fechas
    datad['fecha']=pd.to_datetime(x)
    print(name)
    
    forecast = pd.DataFrame()
    real = pd.DataFrame()
    
    forecast['mean'] = df[(w_e*7)-(7-d_e):(w_e*7)-(7-d_e)+1].T
    forecast['1'] = aux_df.std()
    
    real['real'] = df[(w_e*7)-(7-d_e)+1:(w_e*7)-(7-d_e)+2].T
    
    forecast.to_csv('../../data/expr/stch/base_{}.csv'.format(name), 
                  index=False, sep=';')
    real.to_csv('../../data/expr/stch/real_{}.csv'.format(name), 
                  index=False, sep=';')
    
    # info = {'Forecast': str(x[(w_e*7)-(7-d_e)]), 
    #         'Real': str(x[(w_e*7)-(7-d_e)+1]), 
    #         'Start_week': w_s,
    #         'End_week': w_e,
    #         'Start_day': d_s, 
    #         'End_day': d_e}
    
    
    return None

def read_demand(name, path, w_s, w_e=None, d_s=0, d_e=7):

    co_holidays= holidays.Colombia() # Se buscan los festivos del año
    df = pd.read_csv(path,sep=",") # Se lee la data
    datad=df.copy()
    
    x=[datetime.date(2019,1,1)+datetime.timedelta(i) 
       for i in range(len(datad))] #Se generan las fechas
    datad['fecha']=pd.to_datetime(x)
    
    if not w_e:
        w_e = w_s+1
    
    ndat = max(0, w_s-(d_e-d_s))
    aux_dict = {} #Dias previos
    for i in range(ndat+1, w_e):
        tmp = (i)*7+d_s
        aux_dict[tmp] = list(df.iloc[tmp])
        # aux_dict = pd.concat(df.iloc[tmp], aux_dict.iloc[:])
        # aux_dict.append(df.iloc[tmp])
        #aux_dict.append(df[tmp:tmp+1])
    aux_df = pd.DataFrame(aux_dict, index=list(range(24)))
    aux_df_t = aux_df.copy()

    plt.figure(figsize=(11,6))
    plt.ylim(0, 30000)
    plt.plot(aux_df_t, label=list(aux_df_t.columns),)

    plt.plot(df[(w_e*7)-(7-d_e):(w_e*7)-(7-d_e)+1].T, 
             label=str((w_e*7)-(7-d_e))+' Forecast', linestyle=':')
    plt.plot(df[((w_e+1)*7)-(7-d_e):((w_e+1)*7)-(7-d_e)+1].T, 
             label=str(((w_e+1)*7)-(7-d_e))+' Real', linestyle='--')
    # plt.plot(df[69:70].T, label='NEW', linestyle='--')
    plt.legend(ncol=len(aux_df_t)+1, fontsize=8.5)
    
    
    forecast = pd.DataFrame()
    real = pd.DataFrame()
    
    
    forecast['mean'] = df[(w_e*7)-(7-d_e):(w_e*7)-(7-d_e)+1].T
    aux_df = aux_df.T
    forecast['1'] = list(aux_df.std())
    
    real['real'] = df[((w_e+1)*7)-(7-d_e):((w_e+1)*7)-(7-d_e)+1].T
    
    forecast.to_csv('../../data/expr/stch/base_{}.csv'.format(name), 
                  index=False, sep=';')
    real.to_csv('../../data/expr/stch/real_{}.csv'.format(name), 
                  index=False, sep=';')
    
    info = {'Forecast': str(x[(w_e*7)-(7-d_e)]), 
            'Real Wind and Solar': str(x[(w_e*7)-(7-d_e)+1]),
            'Real Demand': str(x[((w_e+1)*7)-(7-d_e)]),
            'Start_week': w_s,
            'End_week': w_e,
            'Start_day': d_s, 
            'End_day': d_e}

    return json.dumps(info, indent=4)
    
    """# Nueva sección"""
    
if __name__ == "__main__":

    # week, sat, holid = read_data("../../data/expr/base/wind_py.csv")
    w_s = 11
    w_e = 12
    
    d_s = -3
    d_e =4
    
    read_data('wind', "../../data/expr/base/wind_py.csv", w_s, w_e, d_s, d_e)
    ii = read_data('solar', "../../data/expr/base/solar_py.csv", w_s, w_e, d_s, d_e)
    # read_data('demand', "../../data/expr/base/demand_py.csv", w_s, w_e, d_s, d_e)
    info = read_demand('demand', "../../data/expr/base/demand_py.csv", w_s, w_e, d_s, d_e)
    
    with open("../../data/expr/stch/info_{}.json".format(w_s), "w") as outfile:
        outfile.write(info)
    # week.to_csv('../../data/expr/wind.csv', index=False, sep=';')
    # sat.to_csv('../../data/expr/wind.csv', index=False)
    # holid.to_csv('../../data/expr/wind.csv', index=False)




